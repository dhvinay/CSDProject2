#ifndef HIGHCLEARNACE_GD_H
#define HIGHCLEARANCE_GD_H

#include "iGdClient.h"

extern "C"
{
#include "Project.h"
}

namespace HighClearance
{
	//TODO make this in an autogenerated sepearte header file
	static const uint16 IndexList[] =
	{
		GD_ID_HC_TARGET_STATE,
		GD_ID_HC_MACHINE_STATE,
		GD_ID_HC_LEG_STATE_FRONTLEFT,
		GD_ID_HC_LEG_STATE_FRONTRIGHT,
		GD_ID_HC_LEG_STATE_REARLEFT,
		GD_ID_HC_LEG_STATE_REARRIGHT,
		GD_ID_HC_TARGET_CLEARANCE_FL,
		GD_ID_HC_TARGET_CLEARANCE_FR,
		GD_ID_HC_TARGET_CLEARANCE_RL,
		GD_ID_HC_TARGET_CLEARANCE_RR,
		GD_ID_HC_ACTUAL_CLEARANCE_FL,
		GD_ID_HC_ACTUAL_CLEARANCE_FR,
		GD_ID_HC_ACTUAL_CLEARANCE_RL,
		GD_ID_HC_ACTUAL_CLEARANCE_RR,
		GD_ID_HC_STROKE_LEGNTH_RAW_FL,
		GD_ID_HC_STROKE_LEGNTH_RAW_FR,
		GD_ID_HC_STROKE_LEGNTH_RAW_RL,
		GD_ID_HC_STROKE_LEGNTH_RAW_RR,
		GD_ID_HC_OKAY_TO_TRANSITION,
		GD_ID_HC_CYLINDER_PWM_EXTEND_FL,
		GD_ID_HC_CYLINDER_PWM_EXTEND_FR,
		GD_ID_HC_CYLINDER_PWM_EXTEND_RL,
		GD_ID_HC_CYLINDER_PWM_EXTEND_RR,
		GD_ID_HC_CYLINDER_PWM_RETRCT_FL,
		GD_ID_HC_CYLINDER_PWM_RETRCT_FR,
		GD_ID_HC_CYLINDER_PWM_RETRCT_RL,
		GD_ID_HC_CYLINDER_PWM_RETRCT_RR,
		GD_ID_HC_LADDER_EXTEND,
		GD_ID_HC_REQUEST_CCO_OFF,
		GD_ID_HC_USER_WARNINGS,
		GD_ID_HC_MOVEMENT_ERROR_FL,
		GD_ID_HC_MOVEMENT_ERROR_FR,
		GD_ID_HC_MOVEMENT_ERROR_RL,
		GD_ID_HC_MOVEMENT_ERROR_RR,
		GD_ID_HC_MANUAL_OVERRIDE,
		GD_ID_HC_CAL_STATE,
		GD_ID_HC_CAL_CMD,
		GD_ID_HC_SENSOR_RAW_FL,
		GD_ID_HC_SENSOR_RAW_FR,
		GD_ID_HC_SENSOR_RAW_RL,
		GD_ID_HC_SENSOR_RAW_RR,
		GD_ID_HC_COIL_RAW_EXTEND_FL,
		GD_ID_HC_COIL_RAW_RETRCT_FL,
		GD_ID_HC_COIL_RAW_EXTEND_FR,
		GD_ID_HC_COIL_RAW_RETRCT_FR,
		GD_ID_HC_COIL_RAW_EXTEND_RL,
		GD_ID_HC_COIL_RAW_RETRCT_RL,
		GD_ID_HC_COIL_RAW_EXTEND_RR,
		GD_ID_HC_COIL_RAW_RETRCT_RR,
		GD_ID_HC_STROKE_LEGNTH_FILTER_FL,
		GD_ID_HC_STROKE_LEGNTH_FILTER_FR,
		GD_ID_HC_STROKE_LEGNTH_FILTER_RL,
		GD_ID_HC_STROKE_LEGNTH_FILTER_RR,
		GD_ID_HC_ErrorManagement,
		GD_ID_HC_LifeMessage
	};
	
	class highClearanceGd : public iGdClient
	{
		public:
			enum GdRequests_te
			{
				MFA_UP_BUTTON,
				MFA_DOWN_BUTTON,
				MFA_STOP_BUTTON,
				EOI,
				ROAD_FIELD_MODE,
				TRACKWIDTH_FL,
				TRACKWIDTH_FR,
				TRACKWIDTH_RL,
				TRACKWIDTH_RR,
				TRACKWIDTH_TARGET_FL,
				TRACKWIDTH_TARGET_FR,
				TRACKWIDTH_TARGET_RL,
				TRACKWIDTH_TARGET_RR,
				TRACK_EXTEND_FL,
				TRACK_EXTEND_FR,
				TRACK_EXTEND_RL,
				TRACK_EXTEND_RR,
				TRACK_RETRACT_FL,
				TRACK_RETRACT_FR,
				TRACK_RETRACT_RL,
				TRACK_RETRACT_RR,
				MACHINE_SPEED,
				WHEEL_ANGLE,
				SELECTED_GEAR,
				CCO_ENABLE,
				DRIVE_CAL,
				NUM_OF_REQUESTS
			};

		public:
			highClearanceGd();

			virtual ~highClearanceGd();

			void getMyLocList( GdLocList_ts* locList[], uint16* count );
			void getMyLocListBlk( GdBlkIndex_ts * locList[], uint16 * count );
			void getRequestGdList( GdRequests_ts* requestList[], uint16* count );
			sint16 gdBlkIdxRead_s16( uint16 arrayIdx, uint8 *rdData_p, uint16 rdSize );
			sint16 gdBlkIdxWrite_s16( uint16 arrayIdx, uint8 *wData_p, uint16 wSize );
			bool getIndexData( uint16 index, GdData_ts *data_ps );
			void signalImmediateWrite( uint16 index, GdData_ts *data_ps, uint8 senderLN_u8 );
			void signalDataResponse( uint16 index, GdData_ts *data_ps );
			void signalHandshake( uint16 index, GdData_ts * data_ps );
			void signalImmediateWriteError( uint16 index );
            void step( void );

			void setGdIdAmps( uint16 index, uint32 uAmps );

			GdXRequestData_ts* getGdRequestData( GdRequests_te index_e );
			GdXRequestData_ts* getImmWrtCalCmd( void );
			GdXRequestData_ts* getImmWrtManOvr( void );

		protected:
		private:
			GdLocList_ts gdLoclist_s[ARRAY_SIZE( IndexList )];
			GdRequests_ts requests_s[NUM_OF_REQUESTS];

			GdXRequestData_ts gdXImmWrtCalCmd;
			GdXRequestData_ts gdXImmWrtManOvr;
			
			uint32 immWrtCount;

			uint16 coilExAmps_FL;
			uint16 coilRtAmps_FL;
			uint16 coilExAmps_FR;
			uint16 coilRtAmps_FR;
			uint16 coilExAmps_RL;
			uint16 coilRtAmps_RL;
			uint16 coilExAmps_RR;
			uint16 coilRtAmps_RR;
	};
}
#endif //HIGHCLEARANCE_GD_H
